package org.example;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.net.URL;
import java.util.Base64;
import javax.net.ssl.HttpsURLConnection;

public class Main {

    public static void main(String[] args) throws Exception {
//        LK_RECEIPT = –≤—ã–≤–æ–¥ –∏–∑ –æ–±–æ—Ä–æ—Ç–∞
//        SETS_AGGREGATION = —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞
        if (args.length < 2) {
            System.out.println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: java -jar crypto.jar <inputFile> <certSerial> <typeDocument>");
            return;
        }

        String inputFile = args[0];
        String certSerial = args[1];
        String typeDocument = args[2];

        String baseUrl = "https://markirovka.sandbox.crptech.ru/api/v3/true-api";
        String urlAuthKey = baseUrl + "/auth/key";
        String urlAuthSignIn = baseUrl + "/auth/simpleSignIn";
        String urlCreateDoc = baseUrl + "/lk/documents/create?pg=petfood";

        // --- 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (uuid + data) ---
        System.out.println("üîπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏...");
        URL authKeyUrl = new URL(urlAuthKey);
        HttpsURLConnection authKeyConn = (HttpsURLConnection) authKeyUrl.openConnection();
        authKeyConn.setRequestMethod("GET");
        authKeyConn.setRequestProperty("accept", "application/json");

        int authKeyCode = authKeyConn.getResponseCode();
        if (authKeyCode != 200) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ auth/key, –∫–æ–¥: " + authKeyCode);
            printStream(authKeyConn.getErrorStream());
            return;
        }

        String authKeyResponse = readStream(authKeyConn.getInputStream());
        System.out.println("–û—Ç–≤–µ—Ç /auth/key: " + authKeyResponse);

        String uuid = extractJsonValue(authKeyResponse, "uuid");
        String data = extractJsonValue(authKeyResponse, "data");

        if (uuid == null || data == null) {
            System.err.println("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å uuid –∏–ª–∏ data –∏–∑ –æ—Ç–≤–µ—Ç–∞.");
            return;
        }

        // --- 2. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º data —á–µ—Ä–µ–∑ csptest ---
        System.out.println("üîπ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –£–ö–≠–ü...");

        File tempIn = File.createTempFile("data", ".txt");
        File tempOut = File.createTempFile("sign", ".txt");
        Files.write(tempIn.toPath(), data.getBytes(StandardCharsets.UTF_8));

        ProcessBuilder pb = new ProcessBuilder(
                "/opt/cprocsp/bin/amd64/csptest",
                "-sfsign", "-sign",
                "-in", tempIn.getAbsolutePath(),
                "-out", tempOut.getAbsolutePath(),
                "-my", certSerial,
                "-base64",
                "-add"
        );

        Process process = pb.start();
        int exitCode = process.waitFor();
        if (exitCode != 0) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏, –∫–æ–¥ –≤—ã—Ö–æ–¥–∞: " + exitCode);
            printStream(process.getErrorStream());
            return;
        }

        String signatureBase64 = new String(Files.readAllBytes(tempOut.toPath()), StandardCharsets.UTF_8)
                .replaceAll("\\s+", "");

        tempIn.delete();
        tempOut.delete();

        // --- 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /auth/simpleSignIn ---
        System.out.println("üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...");

        String authBody = String.format(
                "{ \"uuid\":\"%s\", \"data\":\"%s\" }",
                uuid, signatureBase64
        );

        URL authSignUrl = new URL(urlAuthSignIn);
        HttpsURLConnection authConn = (HttpsURLConnection) authSignUrl.openConnection();
        authConn.setRequestMethod("POST");
        authConn.setRequestProperty("accept", "application/json");
        authConn.setRequestProperty("Content-Type", "application/json");
        authConn.setDoOutput(true);
        try (OutputStream os = authConn.getOutputStream()) {
            os.write(authBody.getBytes(StandardCharsets.UTF_8));
        }

        int authCode = authConn.getResponseCode();
        String authResponse = readStream(authCode >= 400 ? authConn.getErrorStream() : authConn.getInputStream());
        System.out.println("–û—Ç–≤–µ—Ç /auth/simpleSignIn: " + authResponse);

        if (authCode != 200) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ö–æ–¥: " + authCode);
            return;
        }

        String bearerToken = extractJsonValue(authResponse, "token");
        if (bearerToken == null) {
            System.err.println("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.");
            return;
        }

        System.out.println("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.");

        // --- 4. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º ---
        byte[] inputBytes = Files.readAllBytes(new File(inputFile).toPath());
        String compactJson = new String(inputBytes, StandardCharsets.UTF_8).replaceAll("\\s+", "");
        String base64Document = Base64.getEncoder().encodeToString(compactJson.getBytes(StandardCharsets.UTF_8));

        // --- –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç ---
        System.out.println("üîπ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...");

        File docIn = File.createTempFile("doc", ".txt");
        File docOut = File.createTempFile("signDoc", ".txt");
        Files.write(docIn.toPath(), compactJson.getBytes(StandardCharsets.UTF_8));

        ProcessBuilder pbDoc = new ProcessBuilder(
                "/opt/cprocsp/bin/amd64/csptest",
                "-sfsign", "-sign",
                "-in", docIn.getAbsolutePath(),
                "-out", docOut.getAbsolutePath(),
                "-my", certSerial,
                "-base64",
                "-add"
        );

        Process processDoc = pbDoc.start();
        int docExit = processDoc.waitFor();
        if (docExit != 0) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∫–æ–¥ –≤—ã—Ö–æ–¥–∞: " + docExit);
            printStream(processDoc.getErrorStream());
            return;
        }

        String docSignature = new String(Files.readAllBytes(docOut.toPath()), StandardCharsets.UTF_8)
                .replaceAll("\\s+", "");

        docIn.delete();
        docOut.delete();

        // --- 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç ---
        System.out.println("üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...");

        String bodyJson = String.format(
                "{ \"document_format\":\"MANUAL\", \"product_document\":\"%s\", \"type\":\"%s\", \"signature\":\"%s\" }",
                base64Document,
                typeDocument,
                docSignature
        );

        URL docUrl = new URL(urlCreateDoc);
        HttpsURLConnection con = (HttpsURLConnection) docUrl.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Authorization", "Bearer " + bearerToken);
        con.setRequestProperty("Content-Type", "application/json");
        con.setDoOutput(true);

        try (OutputStream os = con.getOutputStream()) {
            os.write(bodyJson.getBytes(StandardCharsets.UTF_8));
        }

        int responseCode = con.getResponseCode();
        System.out.println("Status code: " + responseCode);
        String response = readStream(responseCode >= 400 ? con.getErrorStream() : con.getInputStream());

        if (responseCode >= 400) {
            System.err.println("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + response);
            String msg = extractJsonValue(response, "error_message");
            if (msg != null) System.err.println("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: " + msg);
        } else {
            System.out.println("Response: " + response);
        }
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---

    private static String readStream(InputStream is) throws IOException {
        if (is == null) return "";
        try (BufferedReader in = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) sb.append(line);
            return sb.toString();
        }
    }

    private static void printStream(InputStream is) throws IOException {
        if (is == null) return;
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {
            String line;
            while ((line = reader.readLine()) != null) System.err.println(line);
        }
    }

    private static String extractJsonValue(String json, String key) {
        int idx = json.indexOf("\"" + key + "\"");
        if (idx == -1) return null;
        int start = json.indexOf(":", idx) + 1;
        int firstQuote = json.indexOf("\"", start);
        int endQuote = json.indexOf("\"", firstQuote + 1);
        if (firstQuote == -1 || endQuote == -1) return null;
        return json.substring(firstQuote + 1, endQuote);
    }
}
